<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on openQA bites</title><link>https://openQA-Bites.github.io/posts/</link><description>Recent content in Posts on openQA bites</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><managingEditor>felix.niederwanger@suse.de (phoenix)</managingEditor><webMaster>felix.niederwanger@suse.de (phoenix)</webMaster><lastBuildDate>Fri, 24 Sep 2021 08:00:00 +0200</lastBuildDate><atom:link href="https://openQA-Bites.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Playing with the openqa API</title><link>https://openQA-Bites.github.io/posts/2021-09-23-api-playing/</link><pubDate>Fri, 24 Sep 2021 08:00:00 +0200</pubDate><author>felix.niederwanger@suse.de (phoenix)</author><guid>https://openQA-Bites.github.io/posts/2021-09-23-api-playing/</guid><description>Today we are going to play a bit around with the amazing API that every openQA instance provides. The aim of this tutorial is to show how the API can be accessed using a simple language like python.</description></item><item><title>openqa-cli Cheatsheet</title><link>https://openQA-Bites.github.io/posts/2021-08-20-openqa-cli-cheatsheet/</link><pubDate>Fri, 20 Aug 2021 10:11:22 +0200</pubDate><author>felix.niederwanger@suse.de (phoenix)</author><guid>https://openQA-Bites.github.io/posts/2021-08-20-openqa-cli-cheatsheet/</guid><description>Checkout the new openqa-cli cheat sheet page where I start to collect some useful &amp;ldquo;how do I do &amp;hellip;&amp;rdquo; snippets for the openQA CLI utility openqa-cli.</description></item><item><title>Use local go modules</title><link>https://openQA-Bites.github.io/posts/2021-08-13-local-go-modules/</link><pubDate>Fri, 13 Aug 2021 10:58:14 +0200</pubDate><author>felix.niederwanger@suse.de (phoenix)</author><guid>https://openQA-Bites.github.io/posts/2021-08-13-local-go-modules/</guid><description>When dealing with go modules, sometimes it&amp;rsquo;s handy to test some changes from a local repository instead of using the upstream one.
Now, go programs are typically relying only on the upstream packages.</description></item><item><title>pasta - stupid simple pastebin service</title><link>https://openQA-Bites.github.io/posts/2021-07-16-pasta/</link><pubDate>Fri, 16 Jul 2021 10:13:55 +0200</pubDate><author>felix.niederwanger@suse.de (phoenix)</author><guid>https://openQA-Bites.github.io/posts/2021-07-16-pasta/</guid><description>pasta is a stupid simple pastebin service for self-hosting. I started this project months ago because I was missing an easy, simple and no pain self-hosting solution.</description></item><item><title>Hidden gem - Show failures only in external results</title><link>https://openQA-Bites.github.io/posts/2021-05-12-failing-external-results/</link><pubDate>Wed, 12 May 2021 09:25:29 +0200</pubDate><author>felix.niederwanger@suse.de (phoenix)</author><guid>https://openQA-Bites.github.io/posts/2021-05-12-failing-external-results/</guid><description>I just recently discovered one of the hidden gems in the openQA WebUI: Show only failing tests in external results.
Problem / User story Certain tests like ltp perform a series of tests within a test run and show the results as &amp;ldquo;External results&amp;rdquo;.</description></item><item><title>Hide IDE folders in git using a global gitignore</title><link>https://openQA-Bites.github.io/posts/2021-04-23-global-gitignore/</link><pubDate>Fri, 23 Apr 2021 10:52:47 +0200</pubDate><author>felix.niederwanger@suse.de (phoenix)</author><guid>https://openQA-Bites.github.io/posts/2021-04-23-global-gitignore/</guid><description>Integrated development environemnts (IDE) are using their own folders withing your code repositories to store their settings. This can become annoying when working on a git repository and they keep popping up as untracked files:</description></item><item><title>IPMI remote access on old machines</title><link>https://openQA-Bites.github.io/posts/2021-04-07/</link><pubDate>Wed, 07 Apr 2021 16:06:48 +0200</pubDate><author>felix.niederwanger@suse.de (phoenix)</author><guid>https://openQA-Bites.github.io/posts/2021-04-07/</guid><description>This is a very short update post about getting the IPMI Remote Control Java Applet from horrible old system running on modern systems. This is an issue that haunted me for some time.</description></item><item><title>Active monitoring of openQA jobs</title><link>https://openQA-Bites.github.io/posts/2021-02-25-openqa-mon/</link><pubDate>Thu, 25 Feb 2021 14:54:57 +0100</pubDate><author>felix.niederwanger@suse.de (phoenix)</author><guid>https://openQA-Bites.github.io/posts/2021-02-25-openqa-mon/</guid><description>openqa-mon is a little command-line utility to monitor one or multiple openQA jobs for their status. This tool is useful if you want to live monitor a handful of jobs closely e.</description></item><item><title>What are Needles</title><link>https://openQA-Bites.github.io/posts/2021-02-10-needles/</link><pubDate>Wed, 10 Feb 2021 09:57:30 +0100</pubDate><author>felix.niederwanger@suse.de (phoenix)</author><guid>https://openQA-Bites.github.io/posts/2021-02-10-needles/</guid><description>In this blog post we are going to give you the easiest introduction to what needles are and how you can use them. While there are many good talks and documentation on needles out there, it took me longer than it should have to find a easy-to-use and easy-to-understand introduction into this topic alone.</description></item><item><title>Background bash commands</title><link>https://openQA-Bites.github.io/posts/2021-02-04-background-scripts/</link><pubDate>Thu, 04 Feb 2021 14:50:02 +0100</pubDate><author>felix.niederwanger@suse.de (phoenix)</author><guid>https://openQA-Bites.github.io/posts/2021-02-04-background-scripts/</guid><description>This post describes the caveats and correct handling of the bash background operator within openQA.</description></item></channel></rss>